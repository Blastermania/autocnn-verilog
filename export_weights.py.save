import torch
import torch.nn as nn
import torch.nn.utils.prune as prune
import numpy as np
import os
import json

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")


class PrunedCNN(nn.Module):
    def __init__(self):
        super(PrunedCNN, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.fc1 = nn.Linear(64 * 7 * 7, 128)  # after two 2x2 poolings
        self.fc2 = nn.Linear(128, 10)
        self.relu = nn.ReLU()
        self.pool = nn.MaxPool2d(2, 2)

    def forward(self, x):
        x = self.pool(self.relu(self.conv1(x)))
        x = self.pool(self.relu(self.conv2(x)))
        x = x.view(x.size(0), -1)
        x = self.relu(self.fc1(x))
        x = self.fc2(x)
        return x

model = PrunedCNN().to(device)
state_dict = torch.load('saved_models/pruned_model.pth', map_location=device)
model.load_state_dict(state_dict)

os.makedirs('saved_weights', exist_ok=True)

def get_pruned_weight(layer):
    if hasattr(layer, 'weight_orig') and hasattr(layer, 'weight_mask'):
        return (layer.weight_orig * layer.weight_mask).detach().cpu().numpy()
    else:
        return layer.weight.detach().cpu().numpy()

# Save weights and biases to .npydef save_weights(layer, name):
    weights = get_pruned_weight(layer)
    bias = layer.bias.detach().cpu().numpy() if layer.bias is not None else None

    np.save(f'saved_weights/{name}_weights.npy', weights)
    print(f"Saved {name} weights to saved_weights/{name}_weights.npy")

    if bias is not None:
        np.save(f'saved_weights/{name}_bias.npy', bias)
        print(f"Saved {name} bias to saved_weights/{name}_bias.npy")

# Save all weights
save_weights(model.conv1, 'conv1')
save_weights(model.conv2, 'conv2')
save_weights(model.fc1, 'fc1')
save_weights(model.fc2, 'fc2')

# Save model architecture to JSON
architecture = []

for name, layer in model.named_modules():
    if isinstance(layer, nn.Conv2d):
        architecture.append({
            "name": name,
            "type": "Conv2d",
            "in_channels": layer.in_channels,
            "out_channels": layer.out_channels,
            "kernel_size": layer.kernel_size,
            "stride": layer.stride,
            "padding": layer.padding
        })
    elif isinstance(layer, nn.Linear):
        architecture.append({
            "name": name,
            "type": "Linear",
            "in_features": layer.in_features,
            "out_features": layer.out_features
        })

with open('saved_weights/model_architecture.json', 'w') as f:
    json.dump(architecture, f, indent=4)

print("Saved model architecture to saved_weights/model_architecture.json")
